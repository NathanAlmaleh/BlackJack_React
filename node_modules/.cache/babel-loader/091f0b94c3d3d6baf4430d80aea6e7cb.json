{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\nathan almaleh\\\\Documents\\\\GitHub\\\\BlackJack_React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\nathan almaleh\\\\Documents\\\\GitHub\\\\BlackJack_React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nathan almaleh\\\\Documents\\\\GitHub\\\\BlackJack_React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\nathan almaleh\\\\Documents\\\\GitHub\\\\BlackJack_React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nathan almaleh\\\\Documents\\\\GitHub\\\\BlackJack_React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nathan almaleh\\\\Documents\\\\GitHub\\\\BlackJack_React\\\\src\\\\components\\\\GameAlgo.js\";\nimport React from \"react\";\nimport Options from \"./Options\";\nimport Dealer from \"./Dealer\";\nimport Player from \"./Player\";\nimport Loading from \"./Loading\";\n\nvar GameAlgo = /*#__PURE__*/function (_React$Component) {\n  _inherits(GameAlgo, _React$Component);\n\n  var _super = _createSuper(GameAlgo);\n\n  function GameAlgo() {\n    var _this;\n\n    _classCallCheck(this, GameAlgo);\n\n    _this = _super.call(this);\n    _this.state = {\n      LoadAPI: false,\n      playerFinish: false,\n      dealerFinish: false,\n      playerWin: false,\n      restartGame: false,\n      dealerSum: 0,\n      playerSum: 0,\n      playerCards: [],\n      dealerCards: []\n    };\n    return _this;\n  }\n\n  _createClass(GameAlgo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchCards(\"player\", this.props.amount);\n      this.fetchCards(\"dealer\", this.props.amount);\n    }\n  }, {\n    key: \"fetchCards\",\n    value: function fetchCards(cardHolder, cardsAmount) {\n      var _this2 = this;\n\n      fetch(\"https://deckofcardsapi.com/api/deck/\".concat(this.props.id, \"/draw/?count=\").concat(cardsAmount)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        if (cardHolder === \"player\") {\n          //initialize playerCards\n          _this2.playerDeck(data);\n\n          _this2.countSum(\"player\");\n        } else {\n          //dealer\n          _this2.dealerDeck(data);\n\n          _this2.countSum(\"dealer\"); // if(this.playerFinish){this.dealerTurn()}\n\n\n          _this2.setState({\n            LoadAPI: true\n          });\n        }\n      });\n    } //Loads dealer card deck\n\n  }, {\n    key: \"dealerDeck\",\n    value: function dealerDeck(NewCards) {\n      this.setState({\n        dealerCards: [].concat(_toConsumableArray(this.state.dealerCards), _toConsumableArray(NewCards.cards))\n      });\n    } //Loads player card deck\n\n  }, {\n    key: \"playerDeck\",\n    value: function playerDeck(NewCards) {\n      this.setState({\n        playerCards: [].concat(_toConsumableArray(this.state.playerCards), _toConsumableArray(NewCards.cards))\n      });\n    }\n  }, {\n    key: \"countSum\",\n    value: function countSum(type) {\n      var _this3 = this;\n\n      var sum = 0;\n\n      if (type === \"player\") {\n        for (var item in this.state.playerCards) {\n          var stVal = this.state.playerCards[item].value;\n          var val = this.cardValue(stVal, type);\n          sum += val;\n        }\n\n        this.setState({\n          playerSum: sum\n        }, function () {\n          _this3.playerToggleController();\n        });\n      } else if (type === \"dealer\") {\n        for (var _item in this.state.dealerCards) {\n          var _stVal = this.state.dealerCards[_item].value;\n\n          var _val = this.cardValue(_stVal, type);\n\n          sum += _val;\n        }\n\n        this.setState({\n          dealerSum: sum\n        }, function () {\n          _this3.dealerTurn();\n        });\n      }\n    }\n  }, {\n    key: \"cardValue\",\n    value: function cardValue(cardVal, type) {\n      var val = parseInt(cardVal, 10);\n      if (val < 11) return val; //TODO: calculate ACE value\n      else if (cardVal === \"ACE\") {\n          var sum;\n\n          switch (type) {\n            case \"player\":\n              sum = this.state.playerSum;\n              if (sum === 10) return 11;else if (sum + 11 > 21) return 1;else return 11;\n\n            case \"dealer\":\n              sum = this.state.dealerSum;\n              if (sum === 10) return 11;else if (sum + 11 > 21) return 1;else return 11;\n\n            default:\n              return 11;\n          }\n        }\n      return 10;\n    } //TOGGLES:\n    //TODO: sets playerFinish=true & calls dealerTurn()\n\n  }, {\n    key: \"playerFinishToggle\",\n    value: function playerFinishToggle() {\n      var _this4 = this;\n\n      this.setState({\n        playerFinish: true\n      }, function () {\n        _this4.dealerTurn();\n      });\n    } //TODO: after calculates all cards & dealer is done\n    //      checks if player wins else restart game\n\n  }, {\n    key: \"dealerFinishToggle\",\n    value: function dealerFinishToggle() {\n      var _this5 = this;\n\n      var playerSum = this.state.playerSum;\n      var dealerSum = this.state.dealerSum;\n      this.setState({\n        playerFinish: true\n      }, function () {\n        _this5.dealerTurn();\n      });\n    } //TODO: after calculates all cards & dealer is done\n    //      checks if player wins else restart game\n\n  }, {\n    key: \"dealerFinishToggle\",\n    value: function dealerFinishToggle() {\n      var playerSum = this.state.playerSum;\n      var dealerSum = this.state.dealerSum;\n      this.setState({\n        dealerFinish: true\n      }, playerSum <= 21 && (playerSum > dealerSum || dealerSum > 21) ? this.setState({\n        playerWin: true\n      }, this.restartToggle()) && console.log(\"player wins!\") : this.restartToggle());\n    } //TODO: draw cards until dealerSum <= 17\n\n  }, {\n    key: \"dealerTurn\",\n    value: function dealerTurn() {\n      var dealerSum = this.state.dealerSum;\n\n      if (dealerSum <= 17 && dealerSum < this.state.playerSum) {\n        this.fetchCards(\"dealer\", 1);\n      } else this.dealerToggleController();\n    } //TODO: update restartGame=true & sets the delay acordingly\n\n  }, {\n    key: \"restartToggle\",\n    value: function restartToggle() {\n      var _this6 = this;\n\n      setTimeout(function () {\n        return _this6.setState({\n          restartGame: true\n        });\n      }, this.state.playerWin ? 5500 : 3000);\n    } //TODO: checks if dealer won AFTER playerFinish=true\n    //      & call dealerFinishToggle\n\n  }, {\n    key: \"dealerToggleController\",\n    value: function dealerToggleController() {\n      var dealerSum = this.state.dealerSum;\n      var playerSum = this.state.playerSum;\n\n      if (this.state.playerFinish) {\n        console.log(this.state);\n        console.log(\"player: \" + this.state.playerSum + \" > dealer: \" + this.state.dealerSum + \" ?\");\n\n        if (playerSum > 21) {\n          console.log(\"Dealer win!!\");\n          this.dealerFinishToggle();\n        } else if (dealerSum > playerSum && dealerSum < 22) {\n          console.log(\"Dealer win!!\");\n          this.dealerFinishToggle();\n        } else if (dealerSum === playerSum) {\n          console.log(\"no Winners!\");\n          this.dealerFinishToggle();\n        } //else }\n        else this.dealerFinishToggle();\n      }\n    } //TODO: checks playerSum status and terminiates turn\n    //      when loses/wins by 21\n\n  }, {\n    key: \"playerToggleController\",\n    value: function playerToggleController() {\n      var playerSum = this.state.playerSum;\n\n      if (playerSum > 21) {\n        console.log(\"Player Lost!\");\n        this.playerFinishToggle();\n      } else if (playerSum === 21) {\n        console.log(\"Player Winner!\");\n        this.playerFinishToggle();\n      }\n    } //TODO: click-Action\n\n  }, {\n    key: \"hitCard\",\n    value: function hitCard() {\n      console.log(\"player requested hit\");\n      if (this.state.playerSum < 21) this.fetchCards(\"player\", 1);\n    } //TODO: stand button\n\n  }, {\n    key: \"stand\",\n    value: function stand() {\n      console.log(\"player stand\");\n      this.playerFinishToggle();\n    } //TODO: split button\n\n  }, {\n    key: \"split\",\n    value: function split() {\n      console.log(\"player requested split\");\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      if (this.state.playerWin) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"popupBackground\",\n          style: this.state.playerWin ? {\n            display: \"block\"\n          } : {\n            display: \"none\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }\n        }, \" Winner !!! \"));\n      } else {\n        return /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }\n        }, \" Lost try again\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      if (!this.state.restartGame) {\n        if (this.state.LoadAPI) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"tableBox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"popupBackground\",\n            style: this.state.playerWin ? {\n              display: \"block\"\n            } : {\n              display: \"none\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }\n          }, \" Winner !!! \")), this.renderResult(), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Dealer, {\n            dealerCards: this.state.dealerCards,\n            dealerSum: this.state.dealerSum,\n            playerFinish: this.state.playerFinish,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Player, {\n            playerCards: this.state.playerCards,\n            playerSum: this.state.playerSum,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Options, {\n            stand: function stand() {\n              return _this7.stand();\n            },\n            hit: function hit() {\n              return _this7.hitCard();\n            },\n            split: function split() {\n              return _this7.split();\n            },\n            playerFinish: this.state.playerFinish,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }\n          })));\n        } else {\n          return /*#__PURE__*/React.createElement(Loading, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 16\n            }\n          });\n        }\n      } else {\n        return /*#__PURE__*/React.createElement(GameAlgo, {\n          id: this.props.id,\n          amount: 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return GameAlgo;\n}(React.Component);\n\nexport default GameAlgo;","map":{"version":3,"sources":["C:/Users/nathan almaleh/Documents/GitHub/BlackJack_React/src/components/GameAlgo.js"],"names":["React","Options","Dealer","Player","Loading","GameAlgo","state","LoadAPI","playerFinish","dealerFinish","playerWin","restartGame","dealerSum","playerSum","playerCards","dealerCards","fetchCards","props","amount","cardHolder","cardsAmount","fetch","id","then","response","json","data","playerDeck","countSum","dealerDeck","setState","NewCards","cards","type","sum","item","stVal","value","val","cardValue","playerToggleController","dealerTurn","cardVal","parseInt","restartToggle","console","log","dealerToggleController","setTimeout","dealerFinishToggle","playerFinishToggle","display","renderResult","stand","hitCard","split","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Options from \"./Options\";\r\nimport Dealer from \"./Dealer\";\r\nimport Player from \"./Player\";\r\nimport Loading from \"./Loading\";\r\n\r\nclass GameAlgo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      LoadAPI: false,\r\n      playerFinish: false,\r\n      dealerFinish: false,\r\n      playerWin: false,\r\n      restartGame: false,\r\n      dealerSum: 0,\r\n      playerSum: 0,\r\n      playerCards: [],\r\n      dealerCards: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchCards(\"player\", this.props.amount);\r\n    this.fetchCards(\"dealer\", this.props.amount);\r\n  }\r\n\r\n  fetchCards(cardHolder, cardsAmount) {\r\n    fetch(\r\n      `https://deckofcardsapi.com/api/deck/${\r\n        this.props.id\r\n      }/draw/?count=${cardsAmount}`\r\n    )\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (cardHolder === \"player\") {\r\n          //initialize playerCards\r\n          this.playerDeck(data);\r\n          this.countSum(\"player\");\r\n        } else {\r\n          //dealer\r\n          this.dealerDeck(data);\r\n          this.countSum(\"dealer\");\r\n          // if(this.playerFinish){this.dealerTurn()}\r\n          this.setState({ LoadAPI: true });\r\n        }\r\n      });\r\n  }\r\n\r\n  //Loads dealer card deck\r\n  dealerDeck(NewCards) {\r\n    this.setState({\r\n      dealerCards: [...this.state.dealerCards, ...NewCards.cards]\r\n    });\r\n  }\r\n  //Loads player card deck\r\n  playerDeck(NewCards) {\r\n    this.setState({\r\n      playerCards: [...this.state.playerCards, ...NewCards.cards]\r\n    });\r\n  }\r\n\r\n  countSum(type) {\r\n    let sum = 0;\r\n    if (type === \"player\") {\r\n      for (let item in this.state.playerCards) {\r\n        let stVal = this.state.playerCards[item].value;\r\n        let val = this.cardValue(stVal, type);\r\n        sum += val;\r\n      }\r\n      this.setState({ playerSum: sum }, () => {\r\n        this.playerToggleController();\r\n      });\r\n    } else if (type === \"dealer\") {\r\n      for (let item in this.state.dealerCards) {\r\n        let stVal = this.state.dealerCards[item].value;\r\n        let val = this.cardValue(stVal, type);\r\n        sum += val;\r\n      }\r\n      this.setState({ dealerSum: sum }, () => {\r\n        this.dealerTurn();\r\n      });\r\n    }\r\n  }\r\n\r\n  cardValue(cardVal, type) {\r\n    let val = parseInt(cardVal, 10);\r\n    if (val < 11) return val;\r\n    //TODO: calculate ACE value\r\n    else if (cardVal === \"ACE\") {\r\n      let sum;\r\n      switch (type) {\r\n        case \"player\":\r\n          sum = this.state.playerSum;\r\n          if (sum === 10) return 11;\r\n          else if (sum + 11 > 21) return 1;\r\n          else return 11;\r\n\r\n        case \"dealer\":\r\n          sum = this.state.dealerSum;\r\n          if (sum === 10) return 11;\r\n          else if (sum + 11 > 21) return 1;\r\n          else return 11;\r\n\r\n        default:\r\n          return 11;\r\n      }\r\n    }\r\n    return 10;\r\n  }\r\n  //TOGGLES:\r\n  //TODO: sets playerFinish=true & calls dealerTurn()\r\n  playerFinishToggle() {\r\n    this.setState({ playerFinish: true }, () => {\r\n      this.dealerTurn();\r\n    });\r\n  }\r\n\r\n  //TODO: after calculates all cards & dealer is done\r\n  //      checks if player wins else restart game\r\n  dealerFinishToggle() {\r\n    const playerSum = this.state.playerSum;\r\n    const dealerSum = this.state.dealerSum;\r\n    this.setState(\r\n      {\r\n        playerFinish: true\r\n      },\r\n      () => {\r\n        this.dealerTurn();\r\n      }\r\n    );\r\n  }\r\n  //TODO: after calculates all cards & dealer is done\r\n  //      checks if player wins else restart game\r\n  dealerFinishToggle() {\r\n    const playerSum = this.state.playerSum;\r\n    const dealerSum = this.state.dealerSum;\r\n    this.setState(\r\n      { dealerFinish: true },\r\n      playerSum <= 21 && (playerSum > dealerSum || dealerSum > 21)\r\n        ? this.setState({ playerWin: true }, this.restartToggle()) &&\r\n            console.log(\"player wins!\")\r\n        : this.restartToggle()\r\n    );\r\n  }\r\n  //TODO: draw cards until dealerSum <= 17\r\n  dealerTurn() {\r\n    let dealerSum = this.state.dealerSum;\r\n\r\n    if (dealerSum <= 17 && dealerSum < this.state.playerSum) {\r\n      this.fetchCards(\"dealer\", 1);\r\n    } else this.dealerToggleController();\r\n  }\r\n\r\n  //TODO: update restartGame=true & sets the delay acordingly\r\n  restartToggle() {\r\n    setTimeout(\r\n      () =>\r\n        this.setState({\r\n          restartGame: true\r\n        }),\r\n      this.state.playerWin ? 5500 : 3000\r\n    );\r\n  }\r\n\r\n  //TODO: checks if dealer won AFTER playerFinish=true\r\n  //      & call dealerFinishToggle\r\n  dealerToggleController() {\r\n    let dealerSum = this.state.dealerSum;\r\n    let playerSum = this.state.playerSum;\r\n\r\n    if (this.state.playerFinish) {\r\n      console.log(this.state);\r\n      console.log(\r\n        \"player: \" +\r\n          this.state.playerSum +\r\n          \" > dealer: \" +\r\n          this.state.dealerSum +\r\n          \" ?\"\r\n      );\r\n      if (playerSum > 21) {\r\n        console.log(\"Dealer win!!\");\r\n        this.dealerFinishToggle();\r\n      } else if (dealerSum > playerSum && dealerSum < 22) {\r\n        console.log(\"Dealer win!!\");\r\n        this.dealerFinishToggle();\r\n      } else if (dealerSum === playerSum) {\r\n        console.log(\"no Winners!\");\r\n        this.dealerFinishToggle();\r\n      } //else }\r\n      else this.dealerFinishToggle();\r\n    }\r\n  }\r\n\r\n  //TODO: checks playerSum status and terminiates turn\r\n  //      when loses/wins by 21\r\n  playerToggleController() {\r\n    let playerSum = this.state.playerSum;\r\n\r\n    if (playerSum > 21) {\r\n      console.log(\"Player Lost!\");\r\n      this.playerFinishToggle();\r\n    } else if (playerSum === 21) {\r\n      console.log(\"Player Winner!\");\r\n      this.playerFinishToggle();\r\n    }\r\n  }\r\n\r\n  //TODO: click-Action\r\n  hitCard() {\r\n    console.log(\"player requested hit\");\r\n    if (this.state.playerSum < 21) this.fetchCards(\"player\", 1);\r\n  }\r\n  //TODO: stand button\r\n  stand() {\r\n    console.log(\"player stand\");\r\n    this.playerFinishToggle();\r\n  }\r\n  //TODO: split button\r\n  split() {\r\n    console.log(\"player requested split\");\r\n  }\r\n\r\n  renderResult(){\r\n    if(this.state.playerWin){\r\n      return(\r\n        <div\r\n            className=\"popupBackground\"\r\n            style={\r\n              this.state.playerWin\r\n                ? { display: \"block\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <h3 > Winner !!! </h3>\r\n      </div>\r\n      )\r\n    }\r\n    else {\r\n      return (<h3 > Lost try again</h3>)\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    if (!this.state.restartGame) {\r\n      if (this.state.LoadAPI) {\r\n        return (\r\n          <div className=\"tableBox\">\r\n            <div\r\n              className=\"popupBackground\"\r\n              style={\r\n                this.state.playerWin\r\n                  ? { display: \"block\" }\r\n                  : { display: \"none\" }\r\n              }\r\n            >\r\n              <h3 > Winner !!! </h3>\r\n            </div>\r\n            {this.renderResult()}\r\n            <div>\r\n              <Dealer\r\n                dealerCards={this.state.dealerCards}\r\n                dealerSum={this.state.dealerSum}\r\n                playerFinish={this.state.playerFinish}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Player\r\n                playerCards={this.state.playerCards}\r\n                playerSum={this.state.playerSum}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Options\r\n                stand={() => this.stand()}\r\n                hit={() => this.hitCard()}\r\n                split={() => this.split()}\r\n                playerFinish={this.state.playerFinish}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n        return <Loading />;\r\n      }\r\n    } else {\r\n      return <GameAlgo id={this.props.id} amount={2} />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default GameAlgo;\r\n"]},"metadata":{},"sourceType":"module"}